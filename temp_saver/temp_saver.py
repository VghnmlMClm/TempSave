# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TempSaver
                                 A QGIS plugin
 Saves Temporary Layers to a Folder (Make Permanent)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-11
        git sha              : $Format:%H$
        copyright            : (C) 2025 by VghnmlMClm
        email                : voughn.calma.086@gmail.com
 ***************************************************************************/

 /***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import os.path
import re

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox, QInputDialog

from .resources import *
from .temp_saver_dialog import TempSaverDialog

from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsVectorLayerExporter,
    QgsVectorFileWriter,
    QgsDataProvider,
    QgsVectorLayerSimpleLabeling,
    QgsCoordinateTransformContext,
    QgsProviderRegistry,
)

class TempSaver:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)

        # locale (avoid QVariant slicing crash)
        try:
            locale_val = QSettings().value('locale/userLocale', '')
            locale = (locale_val or '')[0:2]
        except Exception:
            locale = 'en'
        qm = os.path.join(self.plugin_dir, 'i18n', f'TempSaver_{locale}.qm')
        if os.path.exists(qm):
            self.translator = QTranslator()
            self.translator.load(qm)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&Temporary Layers Saver')
        self.first_start = None

    def tr(self, message):
        return QCoreApplication.translate('TempSaver', message)

    def add_action(self, icon_path, text, callback,
                   enabled_flag=True, add_to_menu=True, add_to_toolbar=True,
                   status_tip=None, whats_this=None, parent=None):
        icon = QIcon(icon_path)
        act = QAction(icon, text, parent)
        act.triggered.connect(callback)
        act.setEnabled(enabled_flag)
        if status_tip: act.setStatusTip(status_tip)
        if whats_this: act.setWhatsThis(whats_this)
        if add_to_toolbar: self.iface.addToolBarIcon(act)
        if add_to_menu: self.iface.addPluginToMenu(self.menu, act)
        self.actions.append(act)
        return act

    def initGui(self):
        icon_path = ':/plugins/temp_saver/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Make Scratch Layers Permanent'),
            callback=self.run,
            parent=self.iface.mainWindow())
        self.first_start = True

    def unload(self):
        for a in self.actions:
            self.iface.removePluginMenu(self.tr(u'&Temporary Layers Saver'), a)
            self.iface.removeToolBarIcon(a)

    # ---------- Helpers ----------
    def _is_scratch(self, layer):
        if not isinstance(layer, QgsVectorLayer):
            return False
        try:
            prov = (layer.providerType() or '').lower()
        except Exception:
            prov = ''
        try:
            src = (layer.source() or '').lower()
        except Exception:
            src = ''
        return prov == 'memory' or src.startswith('memory:')

    def _sanitize(self, name):
        name = (name or '').strip()
        name = re.sub(r'\s+', '_', name)
        name = re.sub(r'[^A-Za-z0-9_]+', '_', name)
        return name.strip('_') or 'layer'

    def _driver_and_ext(self, fmt):
        f = fmt.upper()
        if f == 'GPKG':   return 'GPKG', '.gpkg'
        if f == 'SHP':    return 'ESRI Shapefile', '.shp'
        # default GeoJSON
        return 'GeoJSON', '.geojson'

    def _build_uri(self, fmt, out_path, layer_name):
        # For GPKG, point to specific table; others use plain path
        if fmt.upper() == 'GPKG':
            return f"{out_path}|layername={layer_name}"
        return out_path

    # ---------- Main ----------
    def run(self):
        if self.first_start is True:
            self.first_start = False
            self.dlg = TempSaverDialog()

        # STEP 1: detect scratch layers
        all_layers = list(QgsProject.instance().mapLayers().values())
        scratch_layers = [lyr for lyr in all_layers if self._is_scratch(lyr)]

        if not scratch_layers:
            QMessageBox.information(
                self.iface.mainWindow(),
                self.tr("No scratch layers"),
                self.tr("No temporary (scratch) vector layers found in this project.")
            )
            return

        # Ask user for destination folder
        dest_dir = QFileDialog.getExistingDirectory(
            self.iface.mainWindow(),
            self.tr("Select destination folder for permanent layers")
        )
        if not dest_dir:
            return

        # Ask user for file type
        formats = ['GPKG', 'SHP', 'GEOJSON']
        fmt, ok = QInputDialog.getItem(
            self.iface.mainWindow(),
            self.tr("Choose file type"),
            self.tr("Format:"),
            formats,
            0, False
        )
        if not ok or not fmt:
            return

        driver_name, ext = self._driver_and_ext(fmt)
        transform_ctx = QgsProject.instance().transformContext()

        made_perm, issues = [], []

        # LOOP: for each scratch layer
        for lyr in scratch_layers:
            if not lyr.crs().isValid():
                issues.append(f"{lyr.name()} → Invalid/undefined CRS")
                continue

            safe = self._sanitize(lyr.name())
            out_path = os.path.join(dest_dir, safe + ext)

            # avoid overwriting existing file
            base, e = os.path.splitext(out_path)
            i, candidate = 1, out_path
            while os.path.exists(candidate):
                candidate = f"{base}_{i}{e}"
                i += 1
            out_path = candidate

            # STEP 2: save to chosen format (use Save Scratch Layer; fallback writer v3)
            ok_export, err_msg = False, ""

            # Preferred exporter (same mechanism as "Save Scratch Layer")
            try:
                opts = {
                    'fileEncoding': 'UTF-8',
                    'layerName': safe  # table name in GPKG
                }
                res = QgsVectorLayerExporter.exportLayer(
                    lyr, out_path, 'ogr', lyr.crs(), False, opts
                )
                if isinstance(res, tuple):
                    err_code, err_msg = res
                else:
                    err_code, err_msg = res, ""
                ok_export = (err_code == getattr(QgsVectorLayerExporter, 'NoError', 0)) and os.path.exists(out_path)
            except Exception as e:
                ok_export, err_msg = False, str(e)

            # Fallback for stricter drivers or API quirks
            if not ok_export:
                try:
                    wopts = QgsVectorFileWriter.SaveVectorOptions()
                    wopts.driverName = driver_name
                    wopts.fileEncoding = "UTF-8"
                    wopts.layerName = safe
                    wopts.ct = transform_ctx
                    err, fb_msg = QgsVectorFileWriter.writeAsVectorFormatV3(
                        lyr, out_path, transform_ctx, wopts
                    )
                    ok_export = (err == QgsVectorFileWriter.NoError) and os.path.exists(out_path)
                    if not ok_export and not err_msg:
                        err_msg = fb_msg or "Writer failed"
                except Exception as e2:
                    ok_export = False
                    if not err_msg:
                        err_msg = f"Fallback writer exception: {e2}"

            if not ok_export:
                issues.append(f"{lyr.name()} → {os.path.basename(out_path)}: {err_msg or 'Save failed'}")
                continue

            # STEP 3: replace layer's data source to the newly saved file
            try:
                new_uri = self._build_uri(fmt, out_path, safe)
                # Preserve same name + provider ("ogr") so layer ID & symbology remain
                prov_opts = QgsDataProvider.ProviderOptions()
                lyr.setDataSource(new_uri, lyr.name(), 'ogr', prov_opts)
                lyr.triggerRepaint()
                made_perm.append(lyr.name())
            except Exception as e:
                issues.append(f"{lyr.name()} → switch to new datasource failed: {e}")
                continue

        # Report
        lines = []
        if made_perm:
            lines.append(self.tr("Made permanent:"))
            lines += [f"  • {n}" for n in made_perm]
        if issues:
            if made_perm: lines.append("")
            lines.append(self.tr("Issues:"))
            lines += [f"  • {m}" for m in issues]

        QMessageBox.information(
            self.iface.mainWindow(),
            self.tr("Make Scratch Layers Permanent"),
            "\n".join(lines) if lines else self.tr("Nothing to do.")
        )
